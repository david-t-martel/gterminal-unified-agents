[project]
name = "gterminal"
version = "1.0.0"
description = "AI-Powered Development Environment with integrated Gemini capabilities"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
readme = "README.md"
license = { text = "MIT" }
keywords = ["gemini", "cli", "ai", "google", "vertex-ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

# Enhanced dependencies with caching and performance features
dependencies = [
    # Core AI and Agent frameworks
    "google-genai>=1.28.0",
    "google-cloud-aiplatform>=1.70.0,<=1.71.1",
    "vertexai>=1.70.0,<=1.71.1",
    "google-generativeai>=0.8.5,<1.0",
    # CLI framework
    "click>=8.1.7",
    # Rich terminal UI
    "rich>=13.9.4",
    "prompt-toolkit>=3.0.43",
    # Data validation and configuration
    "pydantic>=2.10.0",
    "pydantic-settings>=2.7.0",
    # MCP Framework
    "mcp>=1.12.3",
    "fastmcp>=2.10.6,<3.0",
    # Caching and performance
    "redis[hiredis]>=6.2.0", # Optional Redis caching
    "psutil>=6.0.0",         # System resource monitoring
    # Async and networking
    "aiofiles>=24.1.0",
    "aiohttp>=3.12.0",
    "httpx>=0.28.0",
    "websockets>=14.1", # LSP filewatcher integration
    # Serialization and data formats
    "pyyaml>=6.0.2",
    "orjson>=3.10.0", # Fast JSON processing
    # Environment management
    "python-dotenv>=1.0.1",
    # Reliability and retrying
    "tenacity>=8.4.0",
    "jq>=1.10.0",
    "coverage>=7.10.2",
    # Web framework and authentication 
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "websockets>=13.0",
    "asyncio-throttle>=1.0.2",
    # Enhanced serialization
    "msgpack>=1.0.8",
    # Authentication and security
    "pyjwt[crypto]>=2.9.0",
    "cryptography>=42.0.0",
    "bcrypt>=4.2.0",
    "passlib[bcrypt]>=1.7.4",
    # Database extensions
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
    # Enhanced monitoring
    "structlog>=24.1.0",
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
    # Development utilities
    "typing-extensions>=4.12.0",
    "attrs>=24.0.0",
    "python-jose[cryptography]>=3.5.0",
    "ptyprocess>=0.7.0",
    # Additional Google Cloud services
    "google-cloud-billing>=1.16.3",
    "google-cloud-compute>=1.33.0",
    "google-cloud-monitoring>=2.27.2",
    "google-cloud-storage>=2.19.0",
]

requires-python = ">=3.12"

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.6.0",     # Parallel test execution
    "pytest-mock>=3.14.0",     # Mocking support
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pytest-timeout>=2.3.1",   # Test timeouts

    # Code quality
    "ruff>=0.6.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.11.0",
    "bandit[toml]>=1.7.9", # Security scanning
    "safety>=3.2.0",       # Dependency security

    # Pre-commit hooks
    "pre-commit>=3.8.0",

    # Performance profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.3",
    "py-spy>=0.3.14",

    # Type checking extensions
    "types-requests>=2.31.0",
    "types-setuptools>=69.0.0",
    "types-redis>=4.6.0",
    "types-psutil>=5.9.0",

    # Documentation
    "sphinx>=8.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",

    # Build tools
    "build>=1.2.0",
    "twine>=5.1.0",

    # MCP validation and development
    "jsonschema>=4.23.0", # JSON schema validation
]

# Additional optional dependency groups
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.6.0",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=4.0.0",
]

quality = [
    "ruff>=0.6.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.11.0",
    "bandit[toml]>=1.7.9",
    "safety>=3.2.0",
    "pre-commit>=3.8.0",
]

performance = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.3",
    "py-spy>=0.3.14",
    "psutil>=6.0.0",
]

mcp = ["jsonschema>=4.23.0", "fastmcp>=2.10.6,<3.0"]

# Production deployment
prod = ["gunicorn>=23.0.0", "uvloop>=0.20.0", "setproctitle>=1.3.3"]

# Monitoring and observability
monitoring = ["prometheus-client>=0.20.0", "structlog>=24.1.0"]

# Redis and caching
cache = ["redis>=6.2.0", "aioredis>=2.0.1"]

[project.scripts]
gterminal = "gterminal.main:main"
gemini-cli = "gemini_cli.main:main"

[project.urls]
Homepage = "https://github.com/your-username/gemini-cli"
Repository = "https://github.com/your-username/gemini-cli"
Documentation = "https://github.com/your-username/gemini-cli#readme"
"Bug Tracker" = "https://github.com/your-username/gemini-cli/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["gterminal", "gemini_cli"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=gterminal",
    "--cov=gemini_cli", 
    "--cov=agents",
    "--cov=core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--durations=10",            # Show slowest 10 tests
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: Async tests",
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "security: Security tests",
    "mcp: MCP compliance tests",
    "cache: Cache system tests",
    "redis: Redis-dependent tests",
    "memory: Memory usage tests",
    "slow: Tests that take a long time",
    "requires_api_key: Tests requiring API keys",
    "requires_redis: Tests requiring Redis server",
    "cli: CLI interface tests",
    "gemini: Gemini API tests",
    "benchmark: Performance benchmark tests",
    "ast_grep: AST-grep pattern tests",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["gterminal", "gemini_cli", "agents", "core"]
omit = [
    "tests/*",
    "gemini_cli/__main__.py",
    "**/migrations/*",
    "**/venv/*",
    "**/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py312"]
line-length = 100

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "RUF", # Ruff-specific rules
    "BLE", # flake8-blind-except
    "COM", # flake8-commas
    "G",   # flake8-logging-format
    "TRY", # tryceratops
    "S",   # bandit security checks
]
ignore = [
    "E501",    # line too long (handled by black)
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value
    "RUF012",  # Mutable class attributes
    "G004",    # Logging f-string (enable gradually)
    "TRY003",  # Avoid specifying long messages outside exception class
    "COM812",  # Missing trailing comma (formatter handles this)
    "S101",    # Use of assert (allowed in tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",    # Use of assert in tests
    "ARG",     # Unused function arguments
    "PLR2004", # Magic values in tests
]
"scripts/**/*" = [
    "ERA001", # Found commented-out code
    "T201",   # Print found
]
"conftest.py" = [
    "S101", # Use of assert
]

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
single-line-exclusions = ["typing", "collections.abc"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "vertexai.*",
    "google.cloud.*",
    "google.oauth2.*",
    "google.auth.*",
    "rich.*",
    "prompt_toolkit.*",
    "click.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv"]
skips = ["B101", "B601"]                                   # Skip assert_used and shell_injection_paramiko

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[dependency-groups]
dev = ["pre-commit>=4.2.0", "pytest-asyncio>=1.1.0", "pytest-cov>=6.2.1"]
