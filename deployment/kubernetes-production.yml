# Kubernetes Production Deployment for GTerminal DevOps Stack
# Scalable infrastructure with integrated Rust and Python services

apiVersion: v1
kind: Namespace
metadata:
  name: gterminal
  labels:
    app.kubernetes.io/name: gterminal
    app.kubernetes.io/version: "1.0.0"

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: gterminal-config
  namespace: gterminal
data:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"

  # Service discovery
  FILEWATCHER_WS_URL: "ws://rust-filewatcher:8765"
  LSP_SERVER_URL: "http://ruff-lsp:8767"
  DASHBOARD_URL: "http://development-dashboard:8080"

  # Performance settings
  RUST_LOG: "info"
  FILEWATCHER_BATCH_SIZE: "200"
  FILEWATCHER_DEBOUNCE_MS: "25"
  LSP_MAX_CONCURRENT: "20"
  DASHBOARD_UPDATE_INTERVAL: "3"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: gterminal-secrets
  namespace: gterminal
type: Opaque
data:
  # Base64 encoded values (replace with actual secrets)
  POSTGRES_PASSWORD: c2VjdXJlX3Bhc3N3b3Jk # secure_password
  JWT_SECRET_KEY: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24= # change-me-in-production
  CLAUDE_API_KEY: "" # Add your Claude API key here
  SLACK_WEBHOOK_URL: "" # Add Slack webhook URL
  SMTP_PASSWORD: "" # Add SMTP password

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: gterminal
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: gterminal
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: gterminal
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: ssd

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: gterminal
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              value: gterminal
            - name: POSTGRES_USER
              value: gterminal
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gterminal-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - gterminal
                - -d
                - gterminal
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - gterminal
                - -d
                - gterminal
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: gterminal
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: gterminal
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - 2g
            - --maxmemory-policy
            - allkeys-lru
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: gterminal
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379

---
# Rust Filewatcher Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rust-filewatcher
  namespace: gterminal
  labels:
    app: rust-filewatcher
spec:
  replicas: 2 # High availability
  selector:
    matchLabels:
      app: rust-filewatcher
  template:
    metadata:
      labels:
        app: rust-filewatcher
    spec:
      containers:
        - name: rust-filewatcher
          image: ghcr.io/gterminal/rust-filewatcher:latest
          env:
            - name: RUST_LOG
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: RUST_LOG
            - name: WEBSOCKET_PORT
              value: "8765"
            - name: METRICS_PORT
              value: "8766"
            - name: BATCH_SIZE
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: FILEWATCHER_BATCH_SIZE
            - name: DEBOUNCE_MS
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: FILEWATCHER_DEBOUNCE_MS
          ports:
            - containerPort: 8765
              name: websocket
            - containerPort: 8766
              name: metrics
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8766
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8766
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true

---
apiVersion: v1
kind: Service
metadata:
  name: rust-filewatcher
  namespace: gterminal
  labels:
    app: rust-filewatcher
spec:
  selector:
    app: rust-filewatcher
  ports:
    - name: websocket
      port: 8765
      targetPort: 8765
    - name: metrics
      port: 8766
      targetPort: 8766

---
# Ruff LSP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ruff-lsp
  namespace: gterminal
  labels:
    app: ruff-lsp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ruff-lsp
  template:
    metadata:
      labels:
        app: ruff-lsp
    spec:
      containers:
        - name: ruff-lsp
          image: ghcr.io/gterminal/ruff-lsp:latest
          env:
            - name: LSP_PORT
              value: "8767"
            - name: METRICS_PORT
              value: "8768"
            - name: MAX_CONCURRENT_REQUESTS
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: LSP_MAX_CONCURRENT
            - name: CLAUDE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: gterminal-secrets
                  key: CLAUDE_API_KEY
            - name: AI_INTEGRATION
              value: "true"
          ports:
            - containerPort: 8767
              name: lsp
            - containerPort: 8768
              name: metrics
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8768
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8768
            initialDelaySeconds: 10
            periodSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: ruff-lsp
  namespace: gterminal
  labels:
    app: ruff-lsp
spec:
  selector:
    app: ruff-lsp
  ports:
    - name: lsp
      port: 8767
      targetPort: 8767
    - name: metrics
      port: 8768
      targetPort: 8768

---
# Development Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: development-dashboard
  namespace: gterminal
  labels:
    app: development-dashboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: development-dashboard
  template:
    metadata:
      labels:
        app: development-dashboard
    spec:
      containers:
        - name: dashboard
          image: ghcr.io/gterminal/dashboard:latest
          env:
            - name: DASHBOARD_PORT
              value: "8080"
            - name: UPDATE_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: DASHBOARD_UPDATE_INTERVAL
            - name: FILEWATCHER_WS_URL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: FILEWATCHER_WS_URL
            - name: LSP_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: LSP_SERVER_URL
          ports:
            - containerPort: 8080
              name: http
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: development-dashboard
  namespace: gterminal
spec:
  selector:
    app: development-dashboard
  ports:
    - port: 8080
      targetPort: 8080

---
# GTerminal Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gterminal-app
  namespace: gterminal
  labels:
    app: gterminal-app
spec:
  replicas: 4 # Horizontal scaling
  selector:
    matchLabels:
      app: gterminal-app
  template:
    metadata:
      labels:
        app: gterminal-app
    spec:
      containers:
        - name: gterminal-app
          image: ghcr.io/gterminal/gterminal:latest
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: LOG_LEVEL
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: ENVIRONMENT
            - name: DATABASE_URL
              value: "postgresql://gterminal:$(POSTGRES_PASSWORD)@postgres:5432/gterminal"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gterminal-secrets
                  key: POSTGRES_PASSWORD
            - name: REDIS_URL
              value: "redis://redis:6379"
            - name: FILEWATCHER_WS_URL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: FILEWATCHER_WS_URL
            - name: LSP_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: gterminal-config
                  key: LSP_SERVER_URL
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: gterminal-secrets
                  key: JWT_SECRET_KEY
            - name: WORKERS
              value: "4"
            - name: MAX_WORKERS
              value: "8"
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 3000
              name: mcp
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: gterminal-app
  namespace: gterminal
spec:
  selector:
    app: gterminal-app
  ports:
    - name: http
      port: 8000
      targetPort: 8000
    - name: mcp
      port: 3000
      targetPort: 3000

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: gterminal
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=30d
            - --web.enable-lifecycle
            - --web.enable-admin-api
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-data
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: gterminal
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gterminal
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gterminal
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gterminal-ingress
  namespace: gterminal
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
    - hosts:
        - gterminal.dev
        - dashboard.gterminal.dev
        - grafana.gterminal.dev
      secretName: gterminal-tls
  rules:
    - host: gterminal.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gterminal-app
                port:
                  number: 8000
    - host: dashboard.gterminal.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: development-dashboard
                port:
                  number: 8080
    - host: grafana.gterminal.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000

---
# Horizontal Pod Autoscaler for main app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gterminal-app-hpa
  namespace: gterminal
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gterminal-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gterminal-app-pdb
  namespace: gterminal
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: gterminal-app

---
# Network Policies for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: gterminal-network-policy
  namespace: gterminal
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: gterminal
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: gterminal
    - to: [] # Allow external egress for API calls
