name: Release Pipeline

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.8.0"

jobs:
  # ================== Pre-Release Validation ==================
  pre-release-validation:
    runs-on: ubuntu-latest
    name: Pre-Release Validation

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --extra dev --extra quality

      - name: Validate version consistency
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [[ "${{ steps.version.outputs.version }}" != "${PYPROJECT_VERSION}" ]]; then
            echo "Version mismatch: tag=${{ steps.version.outputs.version }}, pyproject.toml=${PYPROJECT_VERSION}"
            exit 1
          fi
          echo "Version validation passed: ${{ steps.version.outputs.version }}"

      - name: Run full validation suite
        run: |
          # Pre-commit hooks
          uv run pre-commit run --all-files

          # Type checking
          uv run mypy gemini_cli --no-error-summary

          # Security scans
          uv run bandit -r gemini_cli -ll
          uv run safety check

          # Full test suite
          uv run pytest tests/ -v --cov=gemini_cli --cov-fail-under=85

          # MCP validation
          python3 scripts/validate-mcp-config.py
          python3 scripts/validate-mcp-servers.py

  # ================== Multi-Platform Build ==================
  build-package:
    runs-on: ${{ matrix.os }}
    needs: pre-release-validation
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    name: Build (${{ matrix.os }}, Python ${{ matrix.python-version }})

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Build package
        run: |
          uv build

      - name: Test package installation
        shell: bash
        run: |
          cd /tmp || cd %TEMP%
          uv pip install --find-links "${{ github.workspace }}/dist" gemini-cli
          if command -v gemini-cli; then
            gemini-cli --version || echo "CLI version check completed"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/
          retention-days: 90

  # ================== Rust Extensions Release Build ==================
  build-rust:
    runs-on: ${{ matrix.os }}
    needs: pre-release-validation
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    name: Build Rust Extensions (${{ matrix.os }})

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            gterminal_rust_extensions/target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('gterminal_rust_extensions/Cargo.lock') }}

      - name: Build release
        working-directory: gterminal_rust_extensions
        run: |
          cargo build --release
          cargo test --release

      - name: Upload Rust artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-extensions-${{ matrix.os }}
          path: gterminal_rust_extensions/target/release/
          retention-days: 90

  # ================== Create GitHub Release ==================
  create-release:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-package, build-rust]
    name: Create GitHub Release

    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## What's Changed" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "First release of Gemini CLI Terminal." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add deployment info
          cat >> CHANGELOG.md << EOF

          ## Deployment Information

          **Version**: ${{ needs.pre-release-validation.outputs.version }}
          **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}

          ### Quality Gates Passed ✓
          - Pre-commit hooks validation
          - Type checking with mypy
          - Security scanning (bandit + safety)
          - Test coverage ≥85%
          - MCP protocol validation
          - Multi-platform builds

          ### Included Artifacts
          - Python packages for Linux, Windows, macOS
          - Rust extensions for all platforms
          - Source distribution
          - Documentation

          ### Installation
          \`\`\`bash
          # Install from PyPI (when published)
          uv pip install gemini-cli

          # Or install from GitHub release
          uv pip install https://github.com/your-username/gterminal/releases/download/${{ needs.pre-release-validation.outputs.tag }}/gemini_cli-${{ needs.pre-release-validation.outputs.version }}-py3-none-any.whl
          \`\`\`
          EOF

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.tag }}
          release_name: Release ${{ needs.pre-release-validation.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.pre-release-validation.outputs.tag, '-') }}

  # ================== Upload Release Assets ==================
  upload-assets:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    name: Upload Release Assets

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          # Create release assets directory
          mkdir -p release-assets

          # Collect Python packages
          find package-*/ -name "*.whl" -o -name "*.tar.gz" | while read file; do
            cp "$file" release-assets/
          done

          # Collect Rust binaries
          find rust-extensions-*/ -type f -executable | while read file; do
            # Add platform suffix to binaries
            platform=$(echo "$file" | cut -d'/' -f1 | sed 's/rust-extensions-//')
            filename=$(basename "$file")
            cp "$file" "release-assets/${filename}-${platform}"
          done

          # Create checksums
          cd release-assets
          sha256sum * > SHA256SUMS
          ls -la

      - name: Upload Python wheel (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: release-assets/gemini_cli-${{ needs.pre-release-validation.outputs.version }}-py3-none-any.whl
          asset_name: gemini_cli-${{ needs.pre-release-validation.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload source distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: release-assets/gemini-cli-${{ needs.pre-release-validation.outputs.version }}.tar.gz
          asset_name: gemini-cli-${{ needs.pre-release-validation.outputs.version }}.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: release-assets/SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

  # ================== Publish to Package Registries ==================
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    name: Publish to PyPI
    if: "!contains(needs.pre-release-validation.outputs.tag, '-')" # Only for stable releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install build dependencies
        run: |
          uv sync --extra dev
          uv add twine

      - name: Build package
        run: |
          uv build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/*
        continue-on-error: true

  # ================== Docker Image Build & Push ==================
  publish-docker:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    name: Build & Publish Docker Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gemini-cli
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================== Deployment Notification ==================
  notify-deployment:
    runs-on: ubuntu-latest
    needs:
      [pre-release-validation, create-release, publish-pypi, publish-docker]
    name: Deployment Notification
    if: always()

    steps:
      - name: Deployment Success Notification
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 Deployment Successful!"
          echo ""
          echo "✅ Release: ${{ needs.pre-release-validation.outputs.tag }}"
          echo "✅ GitHub Release: Created"
          echo "$([ "${{ needs.publish-pypi.result }}" == "success" ] && echo "✅ PyPI: Published" || echo "⚠️  PyPI: Skipped/Failed")"
          echo "$([ "${{ needs.publish-docker.result }}" == "success" ] && echo "✅ Docker: Published" || echo "⚠️  Docker: Failed")"
          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.pre-release-validation.outputs.tag }}"

      - name: Deployment Failure Notification
        if: needs.create-release.result != 'success'
        run: |
          echo "❌ Deployment Failed!"
          echo ""
          echo "Please check the workflow logs and retry the deployment."
          exit 1
