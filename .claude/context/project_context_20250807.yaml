# GTerminal Project Context
# Generated: 2025-08-07
# Version: 1.0.0

project:
  name: GTerminal
  description: Complete AI-powered terminal with ReAct engine, MCP dual-mode, and multi-agent support
  location: /home/david/agents/gterminal
  created: 2025-08-06
  last_updated: 2025-08-07

overview:
  goals:
    - Build a TRUE PTY/TTY terminal shell like 'claude' CLI with ReAct engine
    - Implement MCP client/server capabilities for extensibility
    - Enable web-fetch and multi-agent communications
    - Achieve performance gains through Rust extensions (5-100x)
    - Create a production-ready terminal for AI-assisted development

  objectives:
    primary:
      - Complete terminal emulation with PTY/TTY support
      - ReAct reasoning engine with Think-Act-Observe loops
      - MCP dual-mode architecture (client and server)
      - Multi-agent orchestration and communication
    secondary:
      - Rich terminal UI with multi-pane layout
      - Session persistence and context management
      - Performance optimization through Rust extensions
      - Seamless integration with existing tools (fd, rg, etc.)

architecture:
  key_decisions:
    - ReAct engine with Think-Act-Observe loops as core reasoning system
    - MCP dual-mode architecture for maximum flexibility
    - Rust extensions via PyO3 for performance-critical operations
    - Service account authentication only (no API keys)
    - FastMCP for MCP server implementation
    - prompt_toolkit for terminal UI
    - Redis for caching and session persistence

  technology_stack:
    languages:
      - Python 3.12+ (primary)
      - Rust (performance extensions)
    frameworks:
      - FastMCP (MCP server)
      - prompt_toolkit (terminal UI)
      - aiohttp (async HTTP)
      - PyO3 (Python-Rust bindings)
    tools:
      - fd (file discovery)
      - rg (ripgrep for search)
      - uv (Python package management)
    infrastructure:
      - Redis (caching, session state)
      - Service accounts (authentication)

  conventions:
    - No stub code - real implementations only
    - Use fd/rg instead of find/grep
    - Type hints for all functions
    - Comprehensive error handling
    - Async/await for I/O operations
    - Performance benchmarking for critical paths

current_state:
  implemented_features:
    react_engine:
      - Complete Think-Act-Observe loop implementation
      - Context persistence between steps
      - Tool integration and execution
      - Memory management and optimization

    mcp_server:
      - FastMCP server with 20+ exposed tools
      - File operations (read, write, search)
      - Code analysis and generation
      - Web fetch and search capabilities
      - System command execution

    mcp_client:
      - Connection to multiple Gemini MCP servers
      - Tool discovery and invocation
      - Authentication with service accounts
      - Error handling and retries

    terminal:
      - True PTY/TTY emulation
      - Signal handling (SIGINT, SIGTERM, etc.)
      - Multi-pane rich UI layout
      - Command history and completion
      - Session management

    multi_agent:
      - Agent registry and discovery
      - Message queue for communication
      - Coordination protocols
      - Shared context management

  work_in_progress:
    - Building and installing Rust extensions
    - HTTP/WebSocket transports for MCP
    - Real Gemini API integration (currently mock)
    - Distributed agent orchestration
    - Cloud deployment preparation

  known_issues:
    - Rust extensions need to be built and installed
    - Mock web search needs replacement with real API
    - Some MCP client connections may timeout
    - Performance optimization needed for large contexts

  performance_baselines:
    - ReAct step execution: <100ms
    - File operations with Rust: 5-15x faster than Python
    - MCP tool invocation: <50ms overhead
    - Terminal rendering: 60+ FPS
    - Memory usage: <200MB base, <500MB with context

design_decisions:
  architectural_choices:
    separation_of_concerns:
      - MCP client and server are separate modules
      - ReAct engine is independent of UI
      - Tool implementations are pluggable
      - Agent communication via message queue

    modularity:
      - Core ReAct engine can run headless
      - MCP server can run standalone
      - Terminal UI is optional layer
      - Agents are self-contained services

    performance:
      - Rust extensions for file I/O
      - Async/await for concurrency
      - Redis caching for responses
      - Connection pooling for HTTP

  api_design:
    - FastMCP tools with Pydantic models for validation
    - Consistent error responses
    - Streaming support for large outputs
    - Versioned API endpoints

  database_decisions:
    - Redis for ephemeral data (cache, sessions)
    - File-based persistence for configuration
    - No SQL database needed (by design)

  security_model:
    - Service account authentication only
    - No API keys stored or transmitted
    - Secure credential management
    - Audit logging for all operations

code_patterns:
  conventions:
    - Type hints on all functions and methods
    - Docstrings in Google style
    - Async/await for all I/O operations
    - Comprehensive error handling with logging
    - Performance decorators for metrics

  common_patterns:
    tool_registration: |
      @mcp.tool()
      async def tool_name(request: ToolRequest) -> ToolResponse:
          """Tool description."""
          # Implementation

    agent_registry: |
      registry.register_agent(
          name="agent_name",
          capabilities=["cap1", "cap2"],
          handler=agent_handler
      )

    context_management: |
      async with Context() as ctx:
          result = await ctx.execute(action)
          ctx.update_memory(result)

  testing_approach:
    - Feature tests for user scenarios
    - Integration tests for MCP communication
    - Benchmark tests for performance
    - Rust extension validation tests

  error_handling:
    - Try/except blocks with specific exceptions
    - Logging at appropriate levels
    - Graceful degradation for failures
    - User-friendly error messages

agent_coordination:
  history:
    backend_architect:
      - Designed complete system architecture
      - Created module structure and interfaces
      - Defined API contracts
      - Established performance requirements

    python_pro:
      - Implemented ReAct engine core
      - Built MCP server with FastMCP
      - Created terminal UI with prompt_toolkit
      - Integrated session management

    rust_pro:
      - Designed Rust extension architecture
      - Implemented file operations in Rust
      - Created PyO3 bindings
      - Optimized performance hotspots

    security_auditor:
      - Fixed MCP authentication issues
      - Implemented service account handling
      - Removed API key dependencies
      - Added security logging

    deployment_engineer:
      - Deployed authentication fixes
      - Set up build pipelines
      - Created deployment scripts
      - Configured monitoring

  collaboration_model:
    - Agents work on separate modules
    - Communication via shared context
    - Code reviews between agents
    - Performance validation by Rust Pro
    - Security review by Security Auditor

future_roadmap:
  planned_features:
    q1_2025:
      - HTTP/WebSocket transports for MCP
      - Real Gemini API integration
      - Plugin system for custom tools
      - Advanced context management

    q2_2025:
      - Distributed agent orchestration
      - Cloud deployment with Kubernetes
      - Multi-user support
      - Enterprise authentication

    q3_2025:
      - Visual debugging interface
      - Performance profiling tools
      - Agent marketplace
      - Custom agent development SDK

  improvements:
    immediate:
      - Build and package Rust extensions
      - Replace mock web search with real API
      - Optimize ReAct reasoning with caching
      - Add comprehensive documentation

    short_term:
      - Performance monitoring dashboard
      - Automated testing pipeline
      - Docker containerization
      - CI/CD integration

    long_term:
      - Multi-language support
      - Cross-platform compatibility
      - Enterprise features
      - SaaS offering

  technical_debt:
    - Mock implementations need replacement
    - Some hardcoded configurations
    - Test coverage needs improvement
    - Documentation gaps

  performance_goals:
    - ReAct steps: <50ms average
    - File operations: 10x faster minimum
    - Memory usage: <100MB idle
    - Startup time: <1 second

deployment:
  requirements:
    - Python 3.12 or higher
    - Rust toolchain for extensions
    - Redis for caching
    - Service account credentials

  installation:
    - Clone repository
    - Run 'make setup-full'
    - Configure service accounts
    - Start with 'make run'

  configuration:
    - .env for environment variables
    - config.yaml for application settings
    - Service account JSON files
    - Redis connection settings

metadata:
  version_control:
    repository: /home/david/agents/gterminal
    branch: main
    last_commit: (pending)

  documentation:
    readme: README.md
    api_docs: docs/api.md (planned)
    architecture: docs/architecture.md (planned)
    user_guide: docs/user_guide.md (planned)

  team:
    - Backend Architect
    - Python Pro
    - Rust Pro
    - Security Auditor
    - Deployment Engineer

  contact:
    maintainer: David
    location: /home/david/agents/gterminal
